<!doctype html>
<html lang="tr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>MathMon — Kısa Hikâye Oyunu</title>
<style>
  :root{--bg:#f0fbff;--panel:#07364a;--accent:#ffb86b;--text:#04293a}
  *{box-sizing:border-box}
  body{margin:0;font-family:Inter,system-ui,Arial;background:linear-gradient(#e6f7ff,#d7f0ff);color:var(--text)}
  header{padding:12px 16px;display:flex;justify-content:space-between;align-items:center}
  h1{margin:0;font-size:18px}
  main{max-width:980px;margin:12px auto;display:grid;grid-template-columns:1fr 320px;gap:12px;padding:12px}
  .stage{background:#fff;border-radius:12px;padding:12px;box-shadow:0 8px 30px rgba(2,12,30,0.06)}
  #story{min-height:340px;padding:10px;border-radius:8px;background:linear-gradient(180deg,#f8ffff,#eef9ff)}
  .controls{margin-top:10px;display:flex;gap:8px;align-items:center}
  button{padding:8px 10px;border-radius:8px;border:none;cursor:pointer;background:var(--panel);color:#fff}
  .panel{background:#fff;padding:12px;border-radius:10px;box-shadow:0 6px 18px rgba(2,12,30,0.04)}
  #canvas{width:100%;height:260px;background:linear-gradient(#bfefff,#9fd6ff);border-radius:8px;display:block}
  .meter{height:12px;background:#eef;border-radius:999px;overflow:hidden}
  .meter > i{display:block;height:100%;background:linear-gradient(90deg,#ffd36b,#ff8a5b);width:0%}
  #log{height:120px;overflow:auto;font-family:monospace;font-size:13px;background:#fbffff;padding:8px;border-radius:8px;border:1px solid #e6f6ff}
  /* modal */
  #modal{position:fixed;inset:0;display:none;align-items:center;justify-content:center;background:rgba(2,8,20,0.5);z-index:50}
  .card{background:#fff;padding:16px;border-radius:10px;width:90%;max-width:520px;box-shadow:0 10px 30px rgba(2,8,20,0.3)}
  .question{font-size:18px;margin-bottom:8px}
  input[type="text"]{width:100%;padding:10px;border-radius:8px;border:1px solid #ddeff6;font-size:16px}
  .row{display:flex;gap:8px;margin-top:10px;align-items:center}
  footer{grid-column:1/-1;text-align:center;color:#587a8a;padding:8px;font-size:13px}
  @media(max-width:900px){ main{grid-template-columns:1fr} .panel{order:2} }
</style>
</head>
<body>
<header>
  <h1>MathMon — Kısa Hikâye (≈5 dk)</h1>
  <div style="font-size:13px;color:#345">Hikâye-akışı otomatik. Karşılaşmalarda matematik sorularını çöz.</div>
</header>

<main>
  <section class="stage">
    <div id="story">
      <h2 id="title">Bölüm 1 — Başlangıç</h2>
      <div id="text" style="white-space:pre-wrap;line-height:1.5">
        Yolu boyunca küçük bir köyden geçen genç bir eğitmen olan sen, MathMon dünyasına adım atıyorsun...
      </div>
      <div style="margin-top:10px">
        Zaman: <span id="storyTimer">0</span>s / <span id="totalTime">300</span>s
        <div class="meter" style="margin-top:6px"><i id="progress"></i></div>
      </div>

      <canvas id="canvas"></canvas>

      <div class="controls">
        <button id="prev">Geri</button>
        <button id="next">İleri</button>
        <button id="pause">Duraklat</button>
        <div style="flex:1"></div>
        <button id="start">Hikâyeyi Başlat</button>
      </div>

      <div style="margin-top:8px;font-size:13px;color:#456">Not: Sorular çıktığında yanıt kutusu gelir. Süre dolarsa hikâye otomatik devam eder.</div>
    </div>
  </section>

  <aside class="panel">
    <div style="font-weight:700">Durum</div>
    <div style="margin-top:8px">Puan: <strong id="score">0</strong></div>
    <div style="margin-top:8px">Yakalanan MathMon: <strong id="caught">0</strong></div>
    <div style="margin-top:8px">Kalan Bölüm: <span id="chapter">1/6</span></div>

    <div style="margin-top:12px">
      <div style="font-weight:700;margin-bottom:6px">Oyun Günlüğü</div>
      <div id="log"></div>
    </div>
  </aside>

  <footer>Bu dosyayı `index.html` olarak kaydet, GitHub Pages'e yükle — yükleme talimatı aşağıda.</footer>
</main>

<!-- Modal soru -->
<div id="modal">
  <div class="card">
    <div class="question" id="qtext">Soru buraya</div>
    <input id="qinput" type="text" autocomplete="off" placeholder="Cevabını yaz..." />
    <div class="row">
      <button id="qok">Gönder</button>
      <button id="qskip">Atla</button>
      <div style="flex:1;text-align:right;color:#789">Kalan süre: <span id="qtime">12</span>s</div>
    </div>
  </div>
</div>

<script>
/* ---------- Hikâye & Oyun Mantığı ---------- */

/* Ayarlar */
const TOTAL_SECONDS = 300; // ~5 dakika
const SLIDES = [
  {title:"Bölüm 1 — Başlangıç", text:"Sen küçük bir köyde uyanıyorsun. Hedefin: MathMon turnuvasına katılmak.\nYolu takip et ve ipuçlarını bul.", duration:45},
  {title:"Bölüm 2 — Orman Patikası", text:"Ormanda ilerlerken parlak bir kutu görüyorsun. Kutunun içinde bir işlem var.", duration:45, encounter:{type:'box'}},
  {title:"Bölüm 3 — Nehir Kenarı", text:"Nehir kenarında bir MathMon duruyor. Seni test etmek istiyor!", duration:60, encounter:{type:'mathmon'}},
  {title:"Bölüm 4 — Eski Köprü", text:"Köprüde bir bilmece var. Çözersen köprü açılacak.", duration:50, encounter:{type:'box'}},
  {title:"Bölüm 5 — Karanlık Mağara", text:"Mağarada güçlü bir MathMon ile karşılaşıyorsun. Cesaretini topla!", duration:60, encounter:{type:'mathmon'}},
  {title:"Bölüm 6 — Turnuva Alanı", text:"Turnuva alanına ulaştın. Kısa bir sınav var. Başarılar!", duration:40, encounter:{type:'final'}},
];

/* Oyun durumu */
let slideIndex = 0;
let elapsed = 0;
let running = false;
let slideElapsed = 0;
let timerId = null;
let score = 0;
let caught = 0;
let runningQuestion = null;
let questionTimer = null;

/* DOM */
const titleEl = document.getElementById('title');
const textEl = document.getElementById('text');
const timerEl = document.getElementById('storyTimer');
const totalEl = document.getElementById('totalTime');
const progressEl = document.getElementById('progress');
const chapterEl = document.getElementById('chapter');
const scoreEl = document.getElementById('score');
const caughtEl = document.getElementById('caught');
const logEl = document.getElementById('log');
const modal = document.getElementById('modal');
const qtext = document.getElementById('qtext');
const qinput = document.getElementById('qinput');
const qtimeEl = document.getElementById('qtime');

const canvas = document.getElementById('canvas');
canvas.width = canvas.clientWidth;
canvas.height = 200;
const ctx = canvas.getContext('2d');

/* Init */
totalEl.innerText = TOTAL_SECONDS;
updateSlide();

/* Controls */
document.getElementById('start').addEventListener('click', startStory);
document.getElementById('pause').addEventListener('click', togglePause);
document.getElementById('next').addEventListener('click', ()=>{ gotoSlide(slideIndex+1); });
document.getElementById('prev').addEventListener('click', ()=>{ gotoSlide(slideIndex-1); });

document.getElementById('qok').addEventListener('click', submitAnswer);
document.getElementById('qskip').addEventListener('click', skipQuestion);
qinput.addEventListener('keydown', e=>{ if(e.key==='Enter') submitAnswer(); });

/* --- Hikaye ilerletici --- */
function startStory(){
  if(running) return;
  running = true;
  log("Hikâye başladı.");
  timerId = setInterval(tick, 1000);
}
function togglePause(){
  running = !running;
  if(running){
    timerId = setInterval(tick,1000);
    log("Devam edildi.");
  } else {
    clearInterval(timerId);
    log("Duraklatıldı.");
  }
}
function tick(){
  if(!running) return;
  elapsed++; slideElapsed++;
  timerEl.innerText = elapsed;
  // progress bar
  const pct = Math.min(100, Math.floor((elapsed / TOTAL_SECONDS) * 100));
  progressEl.style.width = pct + '%';
  // eğer slide süresi bitti, sonraki slide
  const sd = SLIDES[slideIndex].duration;
  if(slideElapsed >= sd){
    // eğer bu slaytta karşılaşma varsa onu tetikle
    const enc = SLIDES[slideIndex].encounter;
    if(enc && !runningQuestion){
      triggerEncounter(enc.type);
      // after encounter, advance slide (encounter may pause)
      // We'll wait until encounter resolved (or auto skip)
      return;
    }
    gotoSlide(slideIndex+1);
  }
  // sona varınca bitir
  if(elapsed >= TOTAL_SECONDS){
    endStory();
  }
}

/* slide kontrol */
function gotoSlide(i){
  if(i < 0) i = 0;
  if(i >= SLIDES.length){ endStory(); return; }
  slideIndex = i;
  slideElapsed = 0;
  updateSlide();
}
function updateSlide(){
  const s = SLIDES[slideIndex];
  titleEl.innerText = s.title;
  textEl.innerText = s.text;
  chapterEl.innerText = (slideIndex+1) + '/' + SLIDES.length;
  drawScene();
}

/* --- Karşılaşma / soru --- */
function triggerEncounter(type){
  if(type === 'box'){
    const q = generateQuestionForType(randomOp(), Math.max(1, Math.floor(slideIndex/2)+1));
    openQuestion(q, (ans)=>{
      score += 10; scoreEl.innerText = score;
      log("İşlem kutusunu çözdün: +" + 10);
      // ilerle ve slaytı bitir
      gotoSlide(slideIndex+1);
    }, ()=>{
      score = Math.max(0, score-5); scoreEl.innerText = score;
      log("Yanlış cevap, puan -5.");
      gotoSlide(slideIndex+1);
    });
  } else if(type === 'mathmon'){
    const monster = randomMathMon();
    openQuestion(generateQuestionForMathmon(monster), (ans)=>{
      caught++; caughtEl.innerText = caught;
      score += 30; scoreEl.innerText = score;
      log("MathMon yakalandı: " + monster.name + " (+" + 30 + " puan)");
      gotoSlide(slideIndex+1);
    }, ()=>{
      log("MathMon kaçtı!");
      gotoSlide(slideIndex+1);
    });
  } else if(type === 'final'){
    // final: iki soru
    const q1 = generateQuestionForType('+', 2);
    openQuestion(q1, ()=>{
      score += 20; scoreEl.innerText = score;
      log("Final 1 doğru! +20");
      const q2 = generateQuestionForType('×', 2);
      openQuestion(q2, ()=>{
        score += 40; scoreEl.innerText = score;
        log("Final 2 doğru! +40");
        gotoSlide(slideIndex+1);
      }, ()=>{
        log("Final 2 yanlış.");
        gotoSlide(slideIndex+1);
      });
    }, ()=>{
      log("Final 1 yanlış.");
      gotoSlide(slideIndex+1);
    });
  }
}

/* --- Soru modal --- */
function openQuestion(q, onCorrect, onFail){
  runningQuestion = {q,onCorrect,onFail,remaining:12};
  qtext.innerText = q.question;
  qinput.value = '';
  qtimeEl.innerText = runningQuestion.remaining;
  modal.style.display = 'flex';
  qinput.focus();
  // duraklat (hikaye zamanı durur)
  if(running){ clearInterval(timerId); running=false; }
  // soru timer
  questionTimer = setInterval(()=>{
    runningQuestion.remaining--;
    qtimeEl.innerText = runningQuestion.remaining;
    if(runningQuestion.remaining <= 0){
      clearInterval(questionTimer); questionTimer = null;
      closeQuestion(false);
    }
  },1000);
}
function closeQuestion(correct){
  modal.style.display = 'none';
  if(questionTimer){ clearInterval(questionTimer); questionTimer=null; }
  const cb = correct ? runningQuestion.onCorrect : runningQuestion.onFail;
  runningQuestion = null;
  if(cb) cb();
  // hikayeye devam et
  if(!running){ running = true; timerId = setInterval(tick,1000); }
}
function submitAnswer(){
  if(!runningQuestion) return;
  const given = qinput.value.trim();
  if(given === '') return;
  const correct = String(runningQuestion.q.answer);
  if(given === correct){
    log("Cevap doğru: " + correct);
    closeQuestion(true);
  } else {
    log("Cevap yanlış (verilen: " + given + " / doğru: " + correct + ")");
    closeQuestion(false);
  }
}
function skipQuestion(){ if(!runningQuestion) return; log("Soru atlandı."); closeQuestion(false); }

/* --- Soru oluşturucular --- */
function randInt(a,b){ return Math.floor(Math.random()*(b-a+1))+a; }
function randomOp(){ const ops = ['+','-','×','÷']; return ops[randInt(0,ops.length-1)]; }

function generateQuestionForType(type, diff){
  const max = 4 + diff*6;
  let a = randInt(1,max), b = randInt(1,max), question='', answer=null;
  if(type === '+'){ question = `${a} + ${b} = ?`; answer = a + b; }
  else if(type === '-'){ if(a<b){[a,b]=[b,a];} question=`${a} - ${b} = ?`; answer = a - b; }
  else if(type === '×'){ question=`${a} × ${b} = ?`; answer = a * b; }
  else if(type === '÷'){ answer = randInt(1,Math.max(1,Math.floor(max/2))); b = randInt(1,Math.max(1,Math.floor(max/2))); a = answer * b; question=`${a} ÷ ${b} = ?`; }
  else { return generateQuestionForType('+',diff); }
  return {question,answer};
}

function generateQuestionForMathmon(monster){
  const diff = Math.max(1, monster.level);
  const ops = ['+','-','×'];
  const t = ops[randInt(0,ops.length-1)];
  const q = generateQuestionForType(t,diff);
  q.meta = {monster};
  return q;
}

/* --- MathMon oluşturucu --- */
function randomMathMon(){
  const names = ['Addo','Subi','Multu','Diva'];
  return {name: names[randInt(0,names.length-1)], level: randInt(1,3)};
}

/* --- Basit görselleştirme --- */
function drawScene(){
  // mini sahne: player ve olası MathMon çizimi
  ctx.clearRect(0,0,canvas.width,canvas.height);
  // arka plan
  ctx.fillStyle = '#cfefff'; ctx.fillRect(0,0,canvas.width,canvas.height);
  // çizim: player
  ctx.fillStyle = '#4a90e2';
  ctx.beginPath(); ctx.arc(80, 100, 24,0,Math.PI*2); ctx.fill();
  ctx.fillStyle='#fff'; ctx.font='12px sans-serif'; ctx.textAlign='center'; ctx.fillText('Sen',80,100);
  // possible MathMon
  ctx.fillStyle = '#ffd1dc';
  ctx.beginPath(); ctx.arc(260,80,22,0,Math.PI*2); ctx.fill();
  ctx.fillStyle='#123'; ctx.fillText('MathMon',260,80);
  // small decorations per slide
  ctx.fillStyle = '#b3e6ff';
  ctx.fillRect(10,150,canvas.width-20,34);
}

/* --- Yardımcı & günlük --- */
function log(msg){
  const t = new Date().toLocaleTimeString();
  logEl.innerHTML = `[${t}] ${msg}\n` + logEl.innerHTML;
}

/* --- Hikâye sonu --- */
function endStory(){
  clearInterval(timerId);
  running = false;
  titleEl.innerText = "Hikâye Sonu";
  textEl.innerText = `Hikâye bitti! Puanın: ${score} • Yakaladığın MathMon: ${caught}\nTebrikler!`;
  log("Hikâye tamamlandı.");
}

/* --- Başlangıç çizimi --- */
drawScene();

/* --- Klavye kısayolları (isteğe bağlı) --- */
window.addEventListener('keydown', e=>{
  if(e.key === ' ') { if(running) togglePause(); else startStory(); }
});

/* küçük yardımcı: otomatik başlatmak istersen uncomment et */
// startStory();

</script>
</body>
</html>
