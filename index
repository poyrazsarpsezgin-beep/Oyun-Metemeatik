<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Pixel Matematik Macerası</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
            touch-action: manipulation;
        }
        
        body {
            font-family: 'Courier New', monospace;
            background-color: #8bac0f;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            overflow: hidden;
            padding: 10px;
        }
        
        #game-container {
            position: relative;
            width: 100%;
            max-width: 640px;
            height: 70vh;
            min-height: 400px;
            max-height: 480px;
            border: 4px solid #306230;
            background-color: #9bbc0f;
            margin: 0 auto;
        }
        
        canvas {
            display: block;
            width: 100%;
            height: 100%;
        }
        
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #8bac0f;
            color: #0f380f;
            text-align: center;
            padding: 20px;
            z-index: 100;
        }
        
        h1 {
            font-size: clamp(20px, 6vw, 32px);
            margin-bottom: 15px;
            color: #0f380f;
            text-shadow: 2px 2px 0 #306230;
        }
        
        h2 {
            font-size: clamp(16px, 4vw, 24px);
            margin-bottom: 10px;
            color: #0f380f;
        }
        
        p {
            font-size: clamp(12px, 3vw, 16px);
            margin-bottom: 10px;
            line-height: 1.4;
        }
        
        .button {
            background-color: #306230;
            color: #9bbc0f;
            border: none;
            padding: 12px 24px;
            font-size: clamp(14px, 4vw, 18px);
            font-family: 'Courier New', monospace;
            margin-top: 15px;
            cursor: pointer;
            border: 2px solid #0f380f;
            border-radius: 4px;
            min-width: 120px;
        }
        
        .button:hover, .button:active {
            background-color: #0f380f;
        }
        
        #dialogue-box {
            position: absolute;
            bottom: 10px;
            left: 10px;
            right: 10px;
            background-color: #e0f8d0;
            border: 2px solid #0f380f;
            padding: 15px;
            display: none;
            z-index: 50;
            border-radius: 4px;
        }
        
        #math-problem {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #e0f8d0;
            border: 2px solid #0f380f;
            padding: 20px;
            display: none;
            text-align: center;
            width: 90%;
            max-width: 300px;
            z-index: 60;
            border-radius: 4px;
        }
        
        #math-problem input {
            width: 100px;
            padding: 8px;
            margin: 10px 0;
            font-size: 16px;
            text-align: center;
            border: 1px solid #0f380f;
            border-radius: 4px;
        }
        
        #controls {
            position: absolute;
            bottom: 10px;
            right: 10px;
            display: grid;
            grid-template-areas:
                ". up ."
                "left . right"
                ". down .";
            gap: 5px;
            z-index: 40;
        }
        
        .control-btn {
            width: 50px;
            height: 50px;
            background-color: rgba(48, 98, 48, 0.7);
            border: 2px solid #0f380f;
            color: #9bbc0f;
            font-size: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 50%;
            user-select: none;
        }
        
        #up-btn { grid-area: up; }
        #down-btn { grid-area: down; }
        #left-btn { grid-area: left; }
        #right-btn { grid-area: right; }
        
        #action-btn {
            position: absolute;
            bottom: 70px;
            right: 10px;
            width: 70px;
            height: 70px;
            background-color: rgba(48, 98, 48, 0.7);
            border: 2px solid #0f380f;
            color: #9bbc0f;
            font-size: 14px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 50%;
            z-index: 40;
            user-select: none;
            text-align: center;
            padding: 5px;
        }
        
        .npc {
            position: absolute;
            width: 16px;
            height: 16px;
        }
        
        #npc1 { background-color: #ff0000; }
        #npc2 { background-color: #0000ff; }
        #npc3 { background-color: #ffff00; }
        
        .hidden-item {
            position: absolute;
            width: 8px;
            height: 8px;
            background-color: transparent;
        }
        
        #player {
            position: absolute;
            width: 16px;
            height: 16px;
            background-color: #306230;
            z-index: 10;
        }
        
        #hud {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(224, 248, 208, 0.8);
            padding: 8px 12px;
            border: 2px solid #0f380f;
            font-size: clamp(12px, 3vw, 14px);
            z-index: 20;
            border-radius: 4px;
        }
        
        @media (max-width: 480px) {
            #game-container {
                height: 60vh;
                min-height: 350px;
            }
            
            .control-btn {
                width: 45px;
                height: 45px;
                font-size: 18px;
            }
            
            #action-btn {
                width: 60px;
                height: 60px;
                font-size: 12px;
                bottom: 60px;
            }
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="game-canvas"></canvas>
        
        <div id="start-screen" class="screen">
            <h1>PİXEL MATEMATİK MACERASI</h1>
            <p>Rafet adlı karakterimizle dünyayı keşfet!</p>
            <p>10 gizli rasyonel sayı işlemini bul ve çöz!</p>
            <p>NPC'lerden ipuçları almak için tam sayı işlemleri yap!</p>
            <button id="start-button" class="button">OYNA</button>
        </div>
        
        <div id="end-screen" class="screen" style="display: none;">
            <h1>TEBRİKLER!</h1>
            <p>10 gizli rasyonel sayı işlemini başarıyla tamamladın!</p>
            <p>Matematik becerilerin harika!</p>
            <button id="restart-button" class="button">YENİDEN OYNA</button>
        </div>
        
        <div id="dialogue-box">
            <p id="dialogue-text"></p>
            <button id="continue-button" class="button">Devam</button>
        </div>
        
        <div id="math-problem">
            <h3 id="problem-text"></h3>
            <input type="text" id="answer-input" placeholder="Cevap">
            <button id="submit-answer" class="button">Cevapla</button>
            <p id="result-message"></p>
        </div>
        
        <div id="hud">
            Bulunan İşlemler: <span id="found-count">0</span>/10
        </div>
        
        <!-- Mobil kontroller -->
        <div id="controls">
            <div id="up-btn" class="control-btn">↑</div>
            <div id="down-btn" class="control-btn">↓</div>
            <div id="left-btn" class="control-btn">←</div>
            <div id="right-btn" class="control-btn">→</div>
        </div>
        
        <div id="action-btn">ETKİLEŞİM<br>(ENTER)</div>
    </div>

    <script>
        // Oyun durumu
        const gameState = {
            currentScreen: 'start',
            player: {
                x: 320,
                y: 240,
                speed: 3
            },
            npcs: [
                { id: 1, x: 200, y: 150, dialogue: "Merhaba! İlk ipucu için şu işlemi çöz: (-15) + 8 = ?", mathProblem: "-15 + 8", answer: "-7" },
                { id: 2, x: 450, y: 300, dialogue: "Selam! İkinci ipucu için: 24 ÷ (-6) = ?", mathProblem: "24 ÷ (-6)", answer: "-4" },
                { id: 3, x: 150, y: 400, dialogue: "Hey! Son ipucu için: (-5) × (-4) = ?", mathProblem: "(-5) × (-4)", answer: "20" }
            ],
            hiddenProblems: [
                { id: 1, x: 100, y: 100, problem: "3/4 + 1/2", answer: "5/4" },
                { id: 2, x: 500, y: 100, problem: "5/6 - 1/3", answer: "1/2" },
                { id: 3, x: 100, y: 350, problem: "2/3 × 3/5", answer: "2/5" },
                { id: 4, x: 500, y: 350, problem: "3/4 ÷ 2/3", answer: "9/8" },
                { id: 5, x: 300, y: 80, problem: "1/5 + 3/10", answer: "1/2" },
                { id: 6, x: 300, y: 400, problem: "7/8 - 1/4", answer: "5/8" },
                { id: 7, x: 200, y: 250, problem: "2/7 × 14/5", answer: "4/5" },
                { id: 8, x: 400, y: 250, problem: "5/6 ÷ 10/3", answer: "1/4" },
                { id: 9, x: 350, y: 150, problem: "4/9 + 2/3", answer: "10/9" },
                { id: 10, x: 250, y: 300, problem: "11/12 - 5/6", answer: "1/12" }
            ],
            foundProblems: [],
            currentDialogue: null,
            currentMathProblem: null,
            keys: {},
            activeTouch: null,
            canvasScale: 1
        };

        // DOM elementleri
        const gameContainer = document.getElementById('game-container');
        const gameCanvas = document.getElementById('game-canvas');
        const ctx = gameCanvas.getContext('2d');
        const startScreen = document.getElementById('start-screen');
        const endScreen = document.getElementById('end-screen');
        const startButton = document.getElementById('start-button');
        const restartButton = document.getElementById('restart-button');
        const dialogueBox = document.getElementById('dialogue-box');
        const dialogueText = document.getElementById('dialogue-text');
        const continueButton = document.getElementById('continue-button');
        const mathProblem = document.getElementById('math-problem');
        const problemText = document.getElementById('problem-text');
        const answerInput = document.getElementById('answer-input');
        const submitAnswer = document.getElementById('submit-answer');
        const resultMessage = document.getElementById('result-message');
        const foundCount = document.getElementById('found-count');
        
        // Mobil kontroller
        const upBtn = document.getElementById('up-btn');
        const downBtn = document.getElementById('down-btn');
        const leftBtn = document.getElementById('left-btn');
        const rightBtn = document.getElementById('right-btn');
        const actionBtn = document.getElementById('action-btn');

        // Canvas boyutunu ayarla
        function setupCanvas() {
            const containerWidth = gameContainer.clientWidth;
            const containerHeight = gameContainer.clientHeight;
            
            gameCanvas.width = 640;
            gameCanvas.height = 480;
            
            // Canvas ölçekleme
            const scaleX = containerWidth / 640;
            const scaleY = containerHeight / 480;
            gameState.canvasScale = Math.min(scaleX, scaleY);
            
            gameCanvas.style.width = `${640 * gameState.canvasScale}px`;
            gameCanvas.style.height = `${480 * gameState.canvasScale}px`;
        }

        // Oyun başlatma
        function initGame() {
            setupCanvas();
            window.addEventListener('resize', setupCanvas);
            
            // Event listener'lar
            startButton.addEventListener('click', startGame);
            restartButton.addEventListener('click', restartGame);
            continueButton.addEventListener('click', closeDialogue);
            submitAnswer.addEventListener('click', checkAnswer);
            answerInput.addEventListener('keyup', function(event) {
                if (event.key === 'Enter') {
                    checkAnswer();
                }
            });
            
            // Klavye kontrolleri
            document.addEventListener('keydown', function(event) {
                gameState.keys[event.key] = true;
                
                // ESC tuşu ile menüye dön
                if (event.key === 'Escape') {
                    if (gameState.currentScreen === 'game') {
                        if (dialogueBox.style.display === 'block') {
                            closeDialogue();
                        } else if (mathProblem.style.display === 'block') {
                            mathProblem.style.display = 'none';
                        }
                    }
                }
            });
            
            document.addEventListener('keyup', function(event) {
                gameState.keys[event.key] = false;
            });
            
            // Mobil kontroller
            setupTouchControls();
            
            // Oyun döngüsünü başlat
            gameLoop();
        }

        // Mobil kontrolleri ayarla
        function setupTouchControls() {
            // Yön tuşları
            const controlButtons = [upBtn, downBtn, leftBtn, rightBtn];
            
            controlButtons.forEach(btn => {
                btn.addEventListener('touchstart', function(e) {
                    e.preventDefault();
                    const direction = this.id.replace('-btn', '');
                    gameState.keys[`Arrow${direction.charAt(0).toUpperCase() + direction.slice(1)}`] = true;
                });
                
                btn.addEventListener('touchend', function(e) {
                    e.preventDefault();
                    const direction = this.id.replace('-btn', '');
                    gameState.keys[`Arrow${direction.charAt(0).toUpperCase() + direction.slice(1)}`] = false;
                });
                
                // Masaüstü için mouse desteği
                btn.addEventListener('mousedown', function(e) {
                    e.preventDefault();
                    const direction = this.id.replace('-btn', '');
                    gameState.keys[`Arrow${direction.charAt(0).toUpperCase() + direction.slice(1)}`] = true;
                });
                
                btn.addEventListener('mouseup', function(e) {
                    e.preventDefault();
                    const direction = this.id.replace('-btn', '');
                    gameState.keys[`Arrow${direction.charAt(0).toUpperCase() + direction.slice(1)}`] = false;
                });
                
                btn.addEventListener('mouseleave', function(e) {
                    e.preventDefault();
                    const direction = this.id.replace('-btn', '');
                    gameState.keys[`Arrow${direction.charAt(0).toUpperCase() + direction.slice(1)}`] = false;
                });
            });
            
            // Etkileşim butonu
            actionBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                checkInteractions();
            });
            
            actionBtn.addEventListener('mousedown', function(e) {
                e.preventDefault();
                checkInteractions();
            });
        }

        // Oyunu başlat
        function startGame() {
            gameState.currentScreen = 'game';
            startScreen.style.display = 'none';
            drawGame();
        }

        // Oyunu yeniden başlat
        function restartGame() {
            gameState.foundProblems = [];
            gameState.player.x = 320;
            gameState.player.y = 240;
            gameState.currentScreen = 'game';
            endScreen.style.display = 'none';
            foundCount.textContent = '0';
            drawGame();
        }

        // Oyun döngüsü
        function gameLoop() {
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        // Oyun durumunu güncelle
        function update() {
            if (gameState.currentScreen !== 'game') return;
            
            // Oyuncu hareketi
            let moved = false;
            
            if (gameState.keys['ArrowUp'] || gameState.keys['w'] || gameState.keys['W']) {
                gameState.player.y -= gameState.player.speed;
                moved = true;
            }
            if (gameState.keys['ArrowDown'] || gameState.keys['s'] || gameState.keys['S']) {
                gameState.player.y += gameState.player.speed;
                moved = true;
            }
            if (gameState.keys['ArrowLeft'] || gameState.keys['a'] || gameState.keys['A']) {
                gameState.player.x -= gameState.player.speed;
                moved = true;
            }
            if (gameState.keys['ArrowRight'] || gameState.keys['d'] || gameState.keys['D']) {
                gameState.player.x += gameState.player.speed;
                moved = true;
            }
            
            // Sınır kontrolü
            if (gameState.player.x < 0) gameState.player.x = 0;
            if (gameState.player.x > 640 - 16) gameState.player.x = 640 - 16;
            if (gameState.player.y < 0) gameState.player.y = 0;
            if (gameState.player.y > 480 - 16) gameState.player.y = 480 - 16;
        }

        // Oyunu çiz
        function draw() {
            if (gameState.currentScreen !== 'game') return;
            
            ctx.clearRect(0, 0, 640, 480);
            
            // Arka plan çizimi (basit bir dünya)
            ctx.fillStyle = '#9bbc0f';
            ctx.fillRect(0, 0, 640, 480);
            
            // Ağaçlar ve çalılar
            ctx.fillStyle = '#306230';
            for (let i = 0; i < 20; i++) {
                const x = (i * 30 + 50) % 600 + 20;
                const y = (i * 25 + 30) % 400 + 20;
                ctx.fillRect(x, y, 10, 10);
            }
            
            // NPC'ler
            gameState.npcs.forEach(npc => {
                ctx.fillStyle = npc.id === 1 ? '#ff0000' : npc.id === 2 ? '#0000ff' : '#ffff00';
                ctx.fillRect(npc.x, npc.y, 16, 16);
                
                // NPC etiketleri
                ctx.fillStyle = '#0f380f';
                ctx.font = '10px Courier New';
                ctx.fillText(`NPC${npc.id}`, npc.x - 5, npc.y - 5);
            });
            
            // Gizli problemler
            gameState.hiddenProblems.forEach(problem => {
                if (!gameState.foundProblems.includes(problem.id)) {
                    ctx.fillStyle = '#8b0000';
                    ctx.fillRect(problem.x, problem.y, 8, 8);
                    
                    // Problem etiketleri
                    ctx.fillStyle = '#0f380f';
                    ctx.font = '8px Courier New';
                    ctx.fillText(`${problem.id}`, problem.x - 3, problem.y - 3);
                }
            });
            
            // Oyuncu
            ctx.fillStyle = '#306230';
            ctx.fillRect(gameState.player.x, gameState.player.y, 16, 16);
            
            // Oyuncu etiketi
            ctx.fillStyle = '#0f380f';
            ctx.font = '10px Courier New';
            ctx.fillText('Rafet', gameState.player.x - 5, gameState.player.y - 5);
        }

        // Etkileşimleri kontrol et
        function checkInteractions() {
            if (gameState.currentScreen !== 'game') return;
            if (dialogueBox.style.display === 'block' || mathProblem.style.display === 'block') return;
            
            // NPC etkileşimi
            for (const npc of gameState.npcs) {
                const distance = Math.sqrt(
                    Math.pow(gameState.player.x - npc.x, 2) + 
                    Math.pow(gameState.player.y - npc.y, 2)
                );
                
                if (distance < 30) {
                    showDialogue(npc.dialogue);
                    gameState.currentMathProblem = {
                        type: 'npc',
                        problem: npc.mathProblem,
                        answer: npc.answer
                    };
                    return;
                }
            }
            
            // Gizli problem etkileşimi
            for (const problem of gameState.hiddenProblems) {
                if (gameState.foundProblems.includes(problem.id)) continue;
                
                const distance = Math.sqrt(
                    Math.pow(gameState.player.x - problem.x, 2) + 
                    Math.pow(gameState.player.y - problem.y, 2)
                );
                
                if (distance < 20) {
                    showMathProblem(problem.problem, problem.answer, problem.id);
                    return;
                }
            }
            
            // Son meydan okuma
            if (gameState.foundProblems.length === 9) {
                const finalProblems = [
                    { problem: "15 + 7", answer: "22" },
                    { problem: "9 × 6", answer: "54" },
                    { problem: "48 ÷ 8", answer: "6" },
                    { problem: "23 - 14", answer: "9" }
                ];
                
                const randomProblem = finalProblems[Math.floor(Math.random() * finalProblems.length)];
                showMathProblem(randomProblem.problem, randomProblem.answer, 'final');
            }
        }

        // Diyalog kutusunu göster
        function showDialogue(text) {
            dialogueText.textContent = text;
            dialogueBox.style.display = 'block';
        }

        // Diyalog kutusunu kapat
        function closeDialogue() {
            dialogueBox.style.display = 'none';
            
            if (gameState.currentMathProblem && gameState.currentMathProblem.type === 'npc') {
                showMathProblem(
                    gameState.currentMathProblem.problem,
                    gameState.currentMathProblem.answer,
                    'npc'
                );
            }
            
            gameState.currentMathProblem = null;
        }

        // Matematik problemi göster
        function showMathProblem(problem, answer, id) {
            problemText.textContent = problem;
            answerInput.value = '';
            resultMessage.textContent = '';
            mathProblem.style.display = 'block';
            answerInput.focus();
            
            gameState.currentMathProblem = {
                problem: problem,
                answer: answer,
                id: id
            };
        }

        // Cevabı kontrol et
        function checkAnswer() {
            const userAnswer = answerInput.value.trim();
            const correctAnswer = gameState.currentMathProblem.answer;
            
            if (userAnswer === correctAnswer) {
                resultMessage.textContent = 'Doğru!';
                resultMessage.style.color = '#306230';
                
                if (gameState.currentMathProblem.id !== 'npc' && gameState.currentMathProblem.id !== 'final') {
                    if (!gameState.foundProblems.includes(gameState.currentMathProblem.id)) {
                        gameState.foundProblems.push(gameState.currentMathProblem.id);
                        foundCount.textContent = gameState.foundProblems.length;
                    }
                    
                    if (gameState.foundProblems.length === 10) {
                        setTimeout(() => {
                            mathProblem.style.display = 'none';
                            endScreen.style.display = 'flex';
                            gameState.currentScreen = 'end';
                        }, 1000);
                    }
                }
                
                setTimeout(() => {
                    mathProblem.style.display = 'none';
                    gameState.currentMathProblem = null;
                }, 1000);
            } else {
                resultMessage.textContent = 'Yanlış, tekrar deneyin!';
                resultMessage.style.color = '#ff0000';
            }
        }

        // Oyunu başlat
        initGame();
    </script>
</body>
</html>
