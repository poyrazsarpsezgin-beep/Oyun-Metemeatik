<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pokemon Matematik Macerası</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            overflow: hidden;
        }
        
        .container {
            width: 90%;
            max-width: 1200px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }
        
        .screen {
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 20px;
            padding: 30px;
            width: 100%;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.1);
            display: none;
        }
        
        #start-screen {
            display: block;
        }
        
        h1 {
            font-size: 3rem;
            margin-bottom: 20px;
            text-shadow: 0 0 10px #ffcc00;
            color: #ffcc00;
        }
        
        h2 {
            font-size: 2rem;
            margin-bottom: 20px;
            color: #4fc3f7;
        }
        
        p {
            font-size: 1.2rem;
            margin-bottom: 20px;
            line-height: 1.6;
        }
        
        .pokemon {
            width: 150px;
            height: 150px;
            margin: 20px auto;
            background-color: #ffcc00;
            border-radius: 50%;
            position: relative;
            animation: bounce 2s infinite;
        }
        
        .pokemon::before {
            content: '';
            position: absolute;
            width: 60px;
            height: 60px;
            background-color: white;
            border-radius: 50%;
            top: 30px;
            left: 20px;
        }
        
        .pokemon::after {
            content: '';
            position: absolute;
            width: 60px;
            height: 60px;
            background-color: white;
            border-radius: 50%;
            top: 30px;
            right: 20px;
        }
        
        .pokemon .eye {
            position: absolute;
            width: 20px;
            height: 20px;
            background-color: black;
            border-radius: 50%;
            top: 45px;
            left: 35px;
        }
        
        .pokemon .eye:nth-child(2) {
            left: auto;
            right: 35px;
        }
        
        .pokemon .mouth {
            position: absolute;
            width: 60px;
            height: 20px;
            background-color: #e64a19;
            border-radius: 0 0 30px 30px;
            bottom: 40px;
            left: 45px;
        }
        
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
        }
        
        button {
            background: linear-gradient(to right, #ff416c, #ff4b2b);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.2rem;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        button:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.4);
        }
        
        .game-area {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            width: 100%;
        }
        
        .world-map {
            flex: 1;
            min-width: 300px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 15px;
            padding: 20px;
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(5, 1fr);
            gap: 10px;
            height: 400px;
        }
        
        .map-cell {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .map-cell:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: scale(1.05);
        }
        
        .map-cell.active {
            background-color: rgba(255, 215, 0, 0.3);
            box-shadow: 0 0 15px gold;
        }
        
        .map-cell.completed {
            background-color: rgba(76, 175, 80, 0.3);
        }
        
        .map-cell .pokeball {
            width: 30px;
            height: 30px;
            background: linear-gradient(to bottom, #ff0000 50%, white 50%);
            border-radius: 50%;
            position: relative;
        }
        
        .map-cell .pokeball::before {
            content: '';
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: white;
            border: 2px solid black;
            border-radius: 50%;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        
        .player {
            width: 30px;
            height: 30px;
            background-color: #4fc3f7;
            border-radius: 50%;
            position: absolute;
            transition: all 0.5s ease;
            z-index: 10;
        }
        
        .game-info {
            flex: 1;
            min-width: 300px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 15px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .stats {
            display: flex;
            justify-content: space-between;
            background-color: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
        }
        
        .question-box {
            background-color: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            min-height: 150px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .options {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        
        .option {
            background-color: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .option:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .option.correct {
            background-color: rgba(76, 175, 80, 0.5);
        }
        
        .option.incorrect {
            background-color: rgba(244, 67, 54, 0.5);
        }
        
        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .progress {
            height: 100%;
            background: linear-gradient(to right, #4fc3f7, #2196f3);
            width: 0%;
            transition: width 0.5s ease;
        }
        
        .hidden {
            display: none;
        }
        
        @media (max-width: 768px) {
            .game-area {
                flex-direction: column;
            }
            
            .world-map {
                height: 300px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            h2 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Başlangıç Ekranı -->
        <div class="screen" id="start-screen">
            <h1>Pokemon Matematik Macerası</h1>
            <div class="pokemon">
                <div class="eye"></div>
                <div class="eye"></div>
                <div class="mouth"></div>
            </div>
            <p>Pokemon dünyasında bir maceraya hazır mısın? Bu açık dünyada gezerken 10 matematik sorusu çözmen gerekiyor. Tüm soruları doğru cevapla ve macerayı tamamla!</p>
            <button id="start-btn">OYUNA BAŞLA</button>
        </div>
        
        <!-- Oyun Ekranı -->
        <div class="screen" id="game-screen">
            <h2>Matematik Macerası</h2>
            <div class="game-area">
                <div class="world-map" id="world-map">
                    <!-- Harita hücreleri JavaScript ile oluşturulacak -->
                </div>
                <div class="game-info">
                    <div class="stats">
                        <div>Seviye: <span id="level">1</span>/10</div>
                        <div>Puan: <span id="score">0</span></div>
                        <div>Can: <span id="health">100</span>%</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="progress"></div>
                    </div>
                    <div class="question-box">
                        <h3 id="question-text">Bir soru seçmek için haritada bir hücreye tıklayın!</h3>
                        <div class="options hidden" id="options-container">
                            <!-- Seçenekler JavaScript ile oluşturulacak -->
                        </div>
                    </div>
                    <button id="next-btn" class="hidden">Sonraki Soru</button>
                </div>
            </div>
        </div>
        
        <!-- Bitiş Ekranı -->
        <div class="screen" id="end-screen">
            <h1>Tebrikler!</h1>
            <div class="pokemon">
                <div class="eye"></div>
                <div class="eye"></div>
                <div class="mouth"></div>
            </div>
            <h2>Oyunu Tamamladın!</h2>
            <p>Toplam Puan: <span id="final-score">0</span></p>
            <p>Doğru Cevaplar: <span id="correct-answers">0</span>/10</p>
            <button id="restart-btn">TEKRAR OYNA</button>
        </div>
    </div>

    <script>
        // Oyun verileri
        const gameData = {
            currentLevel: 1,
            score: 0,
            health: 100,
            completedQuestions: 0,
            totalQuestions: 10,
            currentQuestion: null,
            playerPosition: 0,
            questions: [
                {
                    question: "15 + 27 işleminin sonucu kaçtır?",
                    options: ["40", "42", "45", "38"],
                    correct: 1
                },
                {
                    question: "72 ÷ 8 işleminin sonucu kaçtır?",
                    options: ["7", "8", "9", "10"],
                    correct: 2
                },
                {
                    question: "Bir dikdörtgenin uzun kenarı 12 cm, kısa kenarı 8 cm ise çevresi kaç cm'dir?",
                    options: ["36", "40", "44", "48"],
                    correct: 1
                },
                {
                    question: "3² + 4² işleminin sonucu kaçtır?",
                    options: ["12", "16", "20", "25"],
                    correct: 3
                },
                {
                    question: "0.5 × 0.4 işleminin sonucu kaçtır?",
                    options: ["0.2", "0.02", "2", "0.002"],
                    correct: 0
                },
                {
                    question: "Bir sayının 3 katının 5 eksiği 19 ise bu sayı kaçtır?",
                    options: ["6", "7", "8", "9"],
                    correct: 2
                },
                {
                    question: "120'nin %25'i kaçtır?",
                    options: ["25", "30", "35", "40"],
                    correct: 1
                },
                {
                    question: "2/3 + 1/6 işleminin sonucu kaçtır?",
                    options: ["1/2", "2/3", "5/6", "1"],
                    correct: 2
                },
                {
                    question: "Bir karenin alanı 64 cm² ise çevresi kaç cm'dir?",
                    options: ["16", "24", "32", "48"],
                    correct: 2
                },
                {
                    question: "5! (5 faktöriyel) işleminin sonucu kaçtır?",
                    options: ["60", "100", "120", "150"],
                    correct: 2
                }
            ]
        };

        // DOM elementleri
        const startScreen = document.getElementById('start-screen');
        const gameScreen = document.getElementById('game-screen');
        const endScreen = document.getElementById('end-screen');
        const startBtn = document.getElementById('start-btn');
        const nextBtn = document.getElementById('next-btn');
        const restartBtn = document.getElementById('restart-btn');
        const worldMap = document.getElementById('world-map');
        const questionText = document.getElementById('question-text');
        const optionsContainer = document.getElementById('options-container');
        const levelElement = document.getElementById('level');
        const scoreElement = document.getElementById('score');
        const healthElement = document.getElementById('health');
        const progressElement = document.getElementById('progress');
        const finalScoreElement = document.getElementById('final-score');
        const correctAnswersElement = document.getElementById('correct-answers');

        // Oyunu başlat
        startBtn.addEventListener('click', startGame);
        nextBtn.addEventListener('click', nextQuestion);
        restartBtn.addEventListener('click', restartGame);

        function startGame() {
            startScreen.style.display = 'none';
            gameScreen.style.display = 'block';
            initializeGame();
        }

        function initializeGame() {
            // Haritayı oluştur
            createMap();
            
            // Oyun verilerini sıfırla
            gameData.currentLevel = 1;
            gameData.score = 0;
            gameData.health = 100;
            gameData.completedQuestions = 0;
            gameData.playerPosition = 0;
            
            // UI'ı güncelle
            updateUI();
            
            // İlk soruyu hazırla
            prepareQuestion(0);
        }

        function createMap() {
            worldMap.innerHTML = '';
            
            for (let i = 0; i < 25; i++) {
                const cell = document.createElement('div');
                cell.className = 'map-cell';
                cell.dataset.index = i;
                
                // Her 2.5 hücrede bir pokeball ekle (10 tane)
                if (i % 2.5 === 0 && i < 25) {
                    const pokeball = document.createElement('div');
                    pokeball.className = 'pokeball';
                    cell.appendChild(pokeball);
                    cell.dataset.hasQuestion = 'true';
                    cell.dataset.questionIndex = i / 2.5;
                }
                
                cell.addEventListener('click', () => selectCell(i));
                worldMap.appendChild(cell);
            }
            
            // Oyuncuyu ekle
            const player = document.createElement('div');
            player.className = 'player';
            player.id = 'player';
            worldMap.appendChild(player);
            
            // Oyuncuyu başlangıç konumuna yerleştir
            updatePlayerPosition();
        }

        function selectCell(index) {
            const cell = document.querySelector(`.map-cell[data-index="${index}"]`);
            
            if (cell.dataset.hasQuestion === 'true' && !cell.classList.contains('completed')) {
                // Tüm hücreleri sıfırla
                document.querySelectorAll('.map-cell').forEach(c => {
                    c.classList.remove('active');
                });
                
                // Seçilen hücreyi aktif yap
                cell.classList.add('active');
                
                // Oyuncuyu bu hücreye taşı
                gameData.playerPosition = index;
                updatePlayerPosition();
                
                // Soruyu göster
                const questionIndex = parseInt(cell.dataset.questionIndex);
                prepareQuestion(questionIndex);
            }
        }

        function updatePlayerPosition() {
            const player = document.getElementById('player');
            const cell = document.querySelector(`.map-cell[data-index="${gameData.playerPosition}"]`);
            const rect = cell.getBoundingClientRect();
            const mapRect = worldMap.getBoundingClientRect();
            
            player.style.left = `${rect.left - mapRect.left + rect.width / 2 - 15}px`;
            player.style.top = `${rect.top - mapRect.top + rect.height / 2 - 15}px`;
        }

        function prepareQuestion(index) {
            if (index >= gameData.questions.length) return;
            
            gameData.currentQuestion = gameData.questions[index];
            questionText.textContent = gameData.currentQuestion.question;
            
            // Seçenekleri oluştur
            optionsContainer.innerHTML = '';
            optionsContainer.classList.remove('hidden');
            
            gameData.currentQuestion.options.forEach((option, i) => {
                const optionElement = document.createElement('div');
                optionElement.className = 'option';
                optionElement.textContent = option;
                optionElement.dataset.index = i;
                optionElement.addEventListener('click', () => selectAnswer(i));
                optionsContainer.appendChild(optionElement);
            });
            
            nextBtn.classList.add('hidden');
        }

        function selectAnswer(selectedIndex) {
            const options = document.querySelectorAll('.option');
            const correctIndex = gameData.currentQuestion.correct;
            
            // Tüm seçenekleri devre dışı bırak
            options.forEach(option => {
                option.style.pointerEvents = 'none';
            });
            
            // Seçilen cevabı işaretle
            if (selectedIndex === correctIndex) {
                options[selectedIndex].classList.add('correct');
                gameData.score += 10;
                gameData.completedQuestions++;
                
                // Mevcut hücreyi tamamlanmış olarak işaretle
                const activeCell = document.querySelector('.map-cell.active');
                activeCell.classList.add('completed');
                activeCell.classList.remove('active');
            } else {
                options[selectedIndex].classList.add('incorrect');
                options[correctIndex].classList.add('correct');
                gameData.health -= 10;
            }
            
            // UI'ı güncelle
            updateUI();
            
            // Sonraki soru butonunu göster
            nextBtn.classList.remove('hidden');
            
            // Tüm sorular tamamlandı mı kontrol et
            if (gameData.completedQuestions === gameData.totalQuestions) {
                setTimeout(endGame, 1500);
            }
        }

        function nextQuestion() {
            // Aktif hücreyi temizle
            document.querySelectorAll('.map-cell').forEach(c => {
                c.classList.remove('active');
            });
            
            // Soru bilgilerini sıfırla
            questionText.textContent = "Bir soru seçmek için haritada bir hücreye tıklayın!";
            optionsContainer.classList.add('hidden');
            nextBtn.classList.add('hidden');
            
            // Seviyeyi güncelle
            gameData.currentLevel = gameData.completedQuestions + 1;
            updateUI();
        }

        function updateUI() {
            levelElement.textContent = gameData.currentLevel;
            scoreElement.textContent = gameData.score;
            healthElement.textContent = gameData.health;
            progressElement.style.width = `${(gameData.completedQuestions / gameData.totalQuestions) * 100}%`;
        }

        function endGame() {
            gameScreen.style.display = 'none';
            endScreen.style.display = 'block';
            finalScoreElement.textContent = gameData.score;
            correctAnswersElement.textContent = gameData.completedQuestions;
        }

        function restartGame() {
            endScreen.style.display = 'none';
            startScreen.style.display = 'block';
        }

        // Pencere boyutu değiştiğinde oyuncu konumunu güncelle
        window.addEventListener('resize', updatePlayerPosition);
    </script>
</body>
</html>
